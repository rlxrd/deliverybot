from aiogram import types, Router, F, Bot
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from app.database.requests import add_user_db, get_location
import app.keyboards as kb
import asyncio
from app.check_loca import get_address

router = Router()


class Categories(StatesGroup):
    device = State()
    stick = State()
    guarantee = State()
    firmware = State()
    cleaning = State()


class Feedback(StatesGroup):
    feedback = State()


# –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(F.text == '/start')
async def cmd_start(message: types.Message):
    await add_user_db(message.from_user.id)
    await message.answer('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=kb.menu)


@router.callback_query(F.data == 'service')
async def cmd_service(call: types.CallbackQuery):
    await call.message.edit_text('‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç Service.', reply_markup=kb.service)


# –ü–æ–∫—É–ø–∫–∞ –¥–µ–≤–∞–π—Å–∞
@router.callback_query(F.data == 'buy_device')
async def cmd_buy_device(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Categories.device)
    await call.answer('üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É –¥–µ–≤–∞–π—Å–∞.')
    await call.message.answer('üìç –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂ –¥–µ–≤–∞–π—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.',
                              reply_markup=kb.main)


@router.message(Categories.device, F.location)
async def location_check_device(message: types.Message, state: FSMContext, bot: Bot):
    
    message_id = await message.answer('–ü–æ–∏—Å–∫...', reply_markup=ReplyKeyboardRemove())
    
    address = await get_address(message.location.latitude, message.location.longitude)
    keyboard = await kb.check(message.location.latitude, message.location.longitude, 'buy_device')
    
    await bot.delete_message(chat_id=message.from_user.id, message_id=message_id.message_id)
    
    if not keyboard:
        await message.answer(f'üîé –í–∞—à –∞–¥—Ä–µ—Å: {address}.\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–±–ª–∏–∑–∏ —Ç–æ—á–µ–∫ –Ω–µ—Ç.', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=kb.menu)
    else:
        await message.answer(text=f'üîé –í–∞—à –∞–¥—Ä–µ—Å: {address}. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑.\n\n–ë–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–µ–≤–∞–π—Å–∞:',
                            reply_markup=keyboard)
    await state.clear()
    

# –ü–æ–∫—É–ø–∫–∞ —Å—Ç–∏–∫–æ–≤
@router.callback_query(F.data == 'buy_sticks')
async def cmd_buy_sticks(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Categories.stick)
    await call.answer('üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É —Å—Ç–∏–∫–æ–≤.')
    await call.message.answer('üìç –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂ —Å—Ç–∏–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.',
                              reply_markup=kb.main)


@router.message(Categories.stick, F.location)
async def location_check_sticks(message: types.Message, state: FSMContext, bot: Bot):
    
    message_id = await message.answer('–ü–æ–∏—Å–∫...', reply_markup=ReplyKeyboardRemove())

    address = await get_address(message.location.latitude, message.location.longitude)
    keyboard = await kb.check(message.location.latitude, message.location.longitude, 'buy_sticks')
    
    await bot.delete_message(chat_id=message.from_user.id, message_id=message_id.message_id)
    
    if not keyboard:
        await message.answer(f'üîé –í–∞—à –∞–¥—Ä–µ—Å: {address}.\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–±–ª–∏–∑–∏ —Ç–æ—á–µ–∫ –Ω–µ—Ç.', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=kb.menu)
    else:
        await message.answer(text=f'üîé –í–∞—à –∞–¥—Ä–µ—Å: {address}. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑.\n\n–ë–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∏–∫–æ–≤:',
                            reply_markup=keyboard)
    await state.clear()


# –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω–∞—è –∑–∞–º–µ–Ω–∞
@router.callback_query(F.data == 'guarantee')
async def cmd_buy_sticks(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Categories.guarantee)
    await call.answer('üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—É—é –∑–∞–º–µ–Ω—É.')
    await call.message.answer('üìç –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–π –∑–∞–º–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.',
                              reply_markup=kb.main)


@router.message(Categories.guarantee, F.location)
async def location_check_sticks(message: types.Message, state: FSMContext, bot: Bot):
    
    message_id = await message.answer('–ü–æ–∏—Å–∫...', reply_markup=ReplyKeyboardRemove())
    
    address = await get_address(message.location.latitude, message.location.longitude)
    keyboard = await kb.check(message.location.latitude, message.location.longitude, 'guarantee')
    
    await bot.delete_message(chat_id=message.from_user.id, message_id=message_id.message_id)
    
    if not keyboard:
        await message.answer(f'üîé –í–∞—à –∞–¥—Ä–µ—Å: {address}.\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–±–ª–∏–∑–∏ —Ç–æ—á–µ–∫ –Ω–µ—Ç.', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=kb.menu)
    else:
        await message.answer(text=f'üîé –í–∞—à –∞–¥—Ä–µ—Å: {address}. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑.\n\n–ë–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–π –∑–∞–º–µ–Ω—ã:',
                            reply_markup=await kb.check(message.location.latitude, message.location.longitude, 'guarantee'))
    await state.clear()


# –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∑–∞–º–µ–Ω–∞/–ø—Ä–æ—à–∏–≤–∫–∞
@router.callback_query(F.data == 'international_guarantee')
async def cmd_buy_sticks(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Categories.firmware)
    await call.answer('üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—É—é –∑–∞–º–µ–Ω—É/–ü—Ä–æ—à–∏–≤–∫—É.')
    await call.message.answer('üìç –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∑–∞–º–µ–Ω—ã/–ü—Ä–æ—à–∏–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.',
                              reply_markup=kb.main)


@router.message(Categories.firmware, F.location)
async def location_check_sticks(message: types.Message, state: FSMContext, bot: Bot):
    
    message_id = await message.answer('–ü–æ–∏—Å–∫...', reply_markup=ReplyKeyboardRemove())

    address = await get_address(message.location.latitude, message.location.longitude)
    keyboard = await kb.check(message.location.latitude, message.location.longitude, 'international_guarantee')
    
    await bot.delete_message(chat_id=message.from_user.id, message_id=message_id.message_id)
    
    if not keyboard:
        await message.answer(f'üîé –í–∞—à –∞–¥—Ä–µ—Å: {address}.\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–±–ª–∏–∑–∏ —Ç–æ—á–µ–∫ –Ω–µ—Ç.', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=kb.menu)
    else:
        await message.answer(text=f'üîé –í–∞—à –∞–¥—Ä–µ—Å: {address}. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑.\n\n–ë–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∑–∞–º–µ–Ω—ã/–ü—Ä–æ—à–∏–≤–∫–∏:',
                             reply_markup=keyboard)
    await state.clear()


# –û—á–∏—Å—Ç–∫–∞
@router.callback_query(F.data == 'cleaning')
async def cmd_buy_sticks(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Categories.cleaning)
    await call.answer('üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å—Ç–∫—É.')
    await call.message.answer('üìç –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ —á–∏—Å—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.',
                              reply_markup=kb.main)


@router.message(Categories.cleaning, F.location)
async def location_check_sticks(message: types.Message, state: FSMContext, bot: Bot):
    
    message_id = await message.answer('–ü–æ–∏—Å–∫...', reply_markup=ReplyKeyboardRemove())

    address = await get_address(message.location.latitude, message.location.longitude)
    keyboard = await kb.check(message.location.latitude, message.location.longitude, 'cleaning')
    
    await bot.delete_message(chat_id=message.from_user.id, message_id=message_id.message_id)
    
    if not keyboard:
        await message.answer(f'üîé –í–∞—à –∞–¥—Ä–µ—Å: {address}.\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–±–ª–∏–∑–∏ —Ç–æ—á–µ–∫ –Ω–µ—Ç.', reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=kb.menu)
    else:
        await message.answer(text=f'üîé –í–∞—à –∞–¥—Ä–µ—Å: {address}. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑.\n\n–ë–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è —á–∏—Å—Ç–∫–∏:',
                            reply_markup=keyboard)
    await state.clear()


# –°–∞–º–∞ –ª–æ–∫–∞—Ü–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
@router.callback_query(F.data.startswith('location_'))
async def location(callback: types.CallbackQuery):
    location_id = callback.data.split('_')[1]
    location = await get_location(location_id)
    await callback.answer()
    await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {location.name}. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤!', reply_markup=await kb.open_location(location))


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–¥–±–µ–∫–∞
@router.callback_query(F.data.startswith('feedback_'))
async def location_feedback(callback: types.CallbackQuery, state: FSMContext):
    location_id = callback.data.split('_')[1]
    location = await get_location(location_id)
    await state.update_data(location_name=location.name, location_lat=location.latitude, location_lon=location.longitude)
    await callback.answer()
    await state.set_state(Feedback.feedback)
    await callback.message.answer('–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ ‚úÖ.', reply_markup=kb.done)


# –§–∏–¥–±–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
@router.message(Feedback.feedback, F.text == '–ì–æ—Ç–æ–≤–æ ‚úÖ')
async def feedback_done(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', reply_markup=ReplyKeyboardRemove())
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=kb.menu)
    

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É
@router.message(Feedback.feedback)
async def feedback(message: types.Message, state: FSMContext, bot: Bot):
    location_data = await state.get_data()
    #await message.send_copy(chat_id=-4024079069)
    await bot.send_message(chat_id=-1001941830316, text=f'–û—Ç–∑—ã–≤ –æ: {location_data["location_name"]}.\n{location_data["location_lat"]}, {location_data["location_lon"]}')
    await message.send_copy(chat_id=-1001941830316)


@router.message(F.text == '/my_id')
async def my_id(message: types.Message):
    await message.answer(f'{message.from_user.id}')


@router.callback_query(F.data == 'main_menu')
async def main_menu(callback: types.CallbackQuery):
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=kb.menu)


@router.message(F.location)
async def del_loca(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.', reply_markup=ReplyKeyboardRemove())
    await message.delete()